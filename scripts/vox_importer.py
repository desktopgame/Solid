# usage: python scripts\vox_importer.py sample.vox | clip
import sys
import math
import struct

# see: https://pypi.org/project/colour-science/
import colour

# see: https://pypi.org/project/bitarray/
from bitarray import bitarray

# see: TileBatch.hpp
SOLID_COLOR_TABLE = [
    # https://lospec.com/palette-list/tag/64
    # Jehkoba64
    (0.0, 0.0, 0.0, 1.0),
    (0.9803921568627451, 0.7333333333333333, 0.6862745098039216, 1.0),
    (0.9215686274509803, 0.4588235294117647, 0.5607843137254902, 1.0),
    (0.8509803921568627, 0.2980392156862745, 0.5568627450980392, 1.0),
    (0.7019607843137254, 0.17647058823529413, 0.49019607843137253, 1.0),
    (0.9803921568627451, 0.596078431372549, 0.5686274509803921, 1.0),
    (1.0, 0.4392156862745098, 0.4392156862745098, 1.0),
    (0.9607843137254902, 0.19215686274509805, 0.2549019607843137, 1.0),
    (0.7686274509803922, 0.047058823529411764, 0.1803921568627451, 1.0),
    (0.5215686274509804, 0.13333333333333333, 0.39215686274509803, 1.0),
    (0.9803921568627451, 0.6274509803921569, 0.19607843137254902, 1.0),
    (0.9607843137254902, 0.5058823529411764, 0.13333333333333333, 1.0),
    (0.9490196078431372, 0.3843137254901961, 0.12156862745098039, 1.0),
    (0.8588235294117647, 0.29411764705882354, 0.08627450980392157, 1.0),
    (0.6196078431372549, 0.2980392156862745, 0.2980392156862745, 1.0),
    (0.9803921568627451, 0.8509803921568627, 0.21568627450980393, 1.0),
    (1.0, 0.7254901960784313, 0.2196078431372549, 1.0),
    (0.9019607843137255, 0.6078431372549019, 0.13333333333333333, 1.0),
    (0.8, 0.5019607843137255, 0.1607843137254902, 1.0),
    (0.6784313725490196, 0.41568627450980394, 0.27058823529411763, 1.0),
    (0.8, 0.7803921568627451, 0.23921568627450981, 1.0),
    (0.7019607843137254, 0.6901960784313725, 0.17647058823529413, 1.0),
    (0.596078431372549, 0.611764705882353, 0.15294117647058825, 1.0),
    (0.5490196078431373, 0.5019607843137255, 0.1411764705882353, 1.0),
    (0.47843137254901963, 0.3686274509803922, 0.21568627450980393, 1.0),
    (0.5803921568627451, 0.7490196078431373, 0.18823529411764706, 1.0),
    (0.3333333333333333, 0.7019607843137254, 0.23137254901960785, 1.0),
    (0.09019607843137255, 0.611764705882353, 0.2627450980392157, 1.0),
    (0.023529411764705882, 0.5019607843137255, 0.3176470588235294, 1.0),
    (0.06666666666666667, 0.3764705882352941, 0.3803921568627451, 1.0),
    (0.6274509803921569, 0.9215686274509803, 0.6588235294117647, 1.0),
    (0.48627450980392156, 0.8117647058823529, 0.6039215686274509, 1.0),
    (0.3607843137254902, 0.7215686274509804, 0.5333333333333333, 1.0),
    (0.23921568627450981, 0.6313725490196078, 0.49411764705882355, 1.0),
    (0.12549019607843137, 0.5019607843137255, 0.4235294117647059, 1.0),
    (0.28627450980392155, 0.7607843137254902, 0.9490196078431372, 1.0),
    (0.1450980392156863, 0.6745098039215687, 0.9607843137254902, 1.0),
    (0.09019607843137255, 0.5764705882352941, 0.9019607843137255, 1.0),
    (0.10980392156862745, 0.4588235294117647, 0.7411764705882353, 1.0),
    (0.09803921568627451, 0.3568627450980392, 0.6509803921568628, 1.0),
    (0.6823529411764706, 0.5333333333333333, 0.8901960784313725, 1.0),
    (0.49411764705882355, 0.49411764705882355, 0.9490196078431372, 1.0),
    (0.34509803921568627, 0.41568627450980394, 0.7686274509803922, 1.0),
    (0.20784313725490197, 0.3254901960784314, 0.6509803921568628, 1.0),
    (0.1411764705882353, 0.2235294117647059, 0.4, 1.0),
    (0.8862745098039215, 0.6078431372549019, 0.9803921568627451, 1.0),
    (0.792156862745098, 0.49411764705882355, 0.9490196078431372, 1.0),
    (0.6392156862745098, 0.36470588235294116, 0.8509803921568627, 1.0),
    (0.4666666666666667, 0.23137254901960785, 0.7490196078431373, 1.0),
    (0.3058823529411765, 0.15294117647058825, 0.5490196078431373, 1.0),
    (0.7098039215686275, 0.5490196078431373, 0.4980392156862745, 1.0),
    (0.6196078431372549, 0.4666666666666667, 0.403921568627451, 1.0),
    (0.5294117647058824, 0.36470588235294116, 0.34509803921568627, 1.0),
    (0.43137254901960786, 0.25882352941176473, 0.3137254901960784, 1.0),
    (0.2784313725490196, 0.1803921568627451, 0.24313725490196078, 1.0),
    (0.6509803921568628, 0.6039215686274509, 0.611764705882353, 1.0),
    (0.5019607843137255, 0.4745098039215686, 0.5019607843137255, 1.0),
    (0.4117647058823529, 0.396078431372549, 0.4392156862745098, 1.0),
    (0.28627450980392155, 0.3176470588235294, 0.4117647058823529, 1.0),
    (0.050980392156862744, 0.12941176470588237, 0.25098039215686274, 1.0),
    (0.0196078431372549, 0.054901960784313725, 0.10196078431372549, 1.0),
    (0.8509803921568627, 0.6549019607843137, 0.596078431372549, 1.0),
    (0.7686274509803922, 0.7333333333333333, 0.7019607843137254, 1.0),
    (0.9490196078431372, 0.9490196078431372, 0.8549019607843137, 1.0),
]

# see: TileBatch.hpp
SOLID_NORMAL_TABLE = [
    # posY
    (0, 1, 0),
    # negY
    (0, -1, 0),
    # posX
    (1, 0, 0),
    # negX
    (-1, 0, 0),
    # posZ
    (0, 0, 1),
    # negZ
    (0, 0, -1),
]


def main():
    if (len(sys.argv) <= 1):
        return
    with open(sys.argv[1], mode='rb') as fp:
        assert struct.unpack('4s', fp.read(4))[0].decode() == 'VOX '
        struct.unpack('i', fp.read(4))

        pallet = []
        voxels = []

        size_x: int = -1
        size_y: int = -1
        size_z: int = -1
        bitmap: bitarray = None

        def coord2index(x: int, y: int, z: int) -> int:
            nonlocal size_x
            nonlocal size_y
            nonlocal size_z
            return (z * size_x * size_y) + (y * size_x) + x

        def bit_at(x: int, y: int, z: int) -> bool:
            nonlocal size_x
            nonlocal size_y
            nonlocal size_z
            if x < 0 or x >= size_x:
                return False
            if y < 0 or y >= size_y:
                return False
            if z < 0 or z >= size_z:
                return False
            return bitmap[coord2index(x, y, z)]

        while fp.read(1):
            fp.seek(-1, 1)

            label = struct.unpack('4s', fp.read(4))[0].decode()
            chunk_size = struct.unpack('i', fp.read(4))[0]
            child_size = struct.unpack('i', fp.read(4))[0]

            if label == 'SIZE':
                size_x = struct.unpack('i', fp.read(4))[0]
                size_z = struct.unpack('i', fp.read(4))[0]
                size_y = struct.unpack('i', fp.read(4))[0]
                bitmap = bitarray(size_x * size_y * size_z)
                # print([size_x, size_y, size_z])
            elif label == 'XYZI':
                count = struct.unpack('i', fp.read(4))[0]
                for _ in range(0, count):
                    voxel = struct.unpack('cccc', fp.read(4))
                    vx = int.from_bytes(voxel[0], 'little')
                    vz = int.from_bytes(voxel[1], 'little')
                    vy = int.from_bytes(voxel[2], 'little')
                    vc = int.from_bytes(voxel[3], 'little')
                    voxels.append((vx, vy, vz, vc))
                    assert size_x >= 0
                    assert size_y >= 0
                    assert size_z >= 0
                    bitmap[coord2index(vx, vy, vz)] = True
            elif label == 'RGBA':
                for _ in range(0, 256):
                    color = struct.unpack('cccc', fp.read(4))
                    r = color[0][0]
                    g = color[1][0]
                    b = color[2][0]
                    a = color[3][0]
                    pallet.append((r / 255, g / 255, b / 255, a / 255))
            else:
                fp.seek(chunk_size, 1)
        
        for v in voxels:
            color = pallet[v[3] - 1]

            high_score = 999999
            selected = -1
            index = 0
            for solid_color in SOLID_COLOR_TABLE:
                color_a = colour.XYZ_to_Lab(colour.sRGB_to_XYZ(solid_color[0:3]))
                color_b = colour.XYZ_to_Lab(colour.sRGB_to_XYZ(color[0:3]))
                score = colour.difference.delta_E_CIE2000(color_a, color_b)

                if score < high_score:
                    high_score = score
                    selected = index
                index += 1

            for i in range(0, len(SOLID_NORMAL_TABLE)):
                normal = SOLID_NORMAL_TABLE[i]
                hiddenSide = bit_at(v[0] + normal[0], v[1] + normal[1], v[2] + normal[2])
                if not hiddenSide:
                    print(f'{v[0]},{v[1]},{v[2]},{(selected*10)+i}')


if __name__ == '__main__':
    main()